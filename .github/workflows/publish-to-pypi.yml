name: Publish to PyPI

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      force_upload:
        description: 'Forces an upload attempt regardless of any significant changes'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r requirements/core.txt

      - name: Run unit tests
        run: python -m unittest discover

      - name: Install setuptools and wheel
        run: pip install setuptools wheel

      - name: Build source distribution
        run: python setup.py sdist

      - name: Build wheel distribution
        run: python setup.py bdist_wheel

      - name: Set Environment Variables
        run: |
          if [[ ${{ github.ref }} == refs/heads/main ]]; then
            echo "TWINE_UPLOAD_CMD=upload dist/*" >> "$GITHUB_ENV"
            echo "TWINE_USERNAME=${{ vars.PYPI_USERNAME }}" >> "$GITHUB_ENV"
            echo "TWINE_PASSWORD=${{ secrets.PYPI_PASSWORD }}" >> "$GITHUB_ENV"
          elif [[ ${{ github.ref }} == refs/heads/dev ]]; then
            echo "TWINE_UPLOAD_CMD=--repository-url https://test.pypi.org/legacy/ dist/*" >> "$GITHUB_ENV"
            echo "TWINE_USERNAME=${{ vars.TESTPYPI_USERNAME }}" >> "$GITHUB_ENV"
            echo "TWINE_PASSWORD=${{ secrets.TESTPYPI_PASSWORD }}" >> "$GITHUB_ENV"
          else
            echo "Unknown branch: ${{ github.ref }}"
          fi

      - uses: yumemi-inc/changed-files@v2
        name: Generate changed files overview
        id: changed

      - name: Upload to PyPI
        if: |
          github.event.inputs.force_upload == 'true' ||
          ! echo "${{ steps.changed.outputs.files }}" | grep -q 'json2spark_mapper/' ||
          ! echo "${{ steps.changed.outputs.files }}" | grep -q 'setup.py'
        run: |
          pip install twine
          echo "Uploading module"
          twine upload $TWINE_UPLOAD_CMD
